#! /usr/bin/env python3
# Makes character_property_map.txt for tetengo::cli
# Copyright (C) 2019-2020 kaoru  https://www.tetengo.org/

from pathlib import Path
import sys


def main():
    if len(sys.argv) <= 2:
        print(
            "Usage: ./make_character_property_map_cpp.py character_property_map.txt ../library/cli/cpp/src/character_property_map.cpp",
            file=sys.stderr
        )
        sys.exit(0)
    elements = load_file(Path(sys.argv[1]))
    content = make_cpp_source(elements)
    save_file(Path(sys.argv[2]), content)

def load_file(path):
    elements = []
    with path.open(mode="r") as stream:
        for line in stream:
            line = line.rstrip("\r\n")
            [code, east_asian_width, grapheme] = line.split("\t")
            elements.append(make_element(code, east_asian_width, grapheme))
    return elements

def make_element(code, east_asian_width, grapheme):
    return "        { " + "0x{}, east_asian_width_class_type::{}, grapheme_break_property_type::{}".format(
        code, to_east_asian_width_class_type(east_asian_width), to_grapheme_break_property(grapheme)
    ) + " },\n"

def to_east_asian_width_class_type(symbol):
    if   symbol == "A":
        return "ambiguous"
    elif symbol == "F":
        return "fullwidth"
    elif symbol == "H":
        return "halfwidth"
    elif symbol == "Na":
        return "narrow"
    elif symbol == "W":
        return "wide"
    elif symbol == "N":
        return "neutral"
    else:
        raise RuntimeError("Unknown class: {}".format(symbol))

def to_grapheme_break_property(symbol):
    if   symbol == "CR":
        return "cr"
    elif symbol == "LF":
        return "lf"
    elif symbol == "Control":
        return "control"
    elif symbol == "Extend":
        return "extend"
    elif symbol == "ZWJ":
        return "zwj"
    elif symbol == "Regional":
        return "regional"
    elif symbol == "Prepend":
        return "prepend"
    elif symbol == "SpacingMark":
        return "spacing_mark"
    elif symbol == "L":
        return "l"
    elif symbol == "V":
        return "v"
    elif symbol == "T":
        return "t"
    elif symbol == "LV":
        return "lv"
    elif symbol == "LVT":
        return "lvt"
    elif symbol == "Other":
        return "other"
    else:
        raise RuntimeError("Unknown grapheme: {}".format(symbol))

def make_cpp_source(elements):
    content = '''/*! \\file
    \\brief A character property map.

    This file is generated by tools/make_character_property_map_cpp.py.

    Copyright (C) 2019-2020 kaoru  https://www.tetengo.org/
*/

#include <cstddef>

#include "tetengo.cli.character_property_map.hpp"


namespace tetengo::cli
{
'''
    content += "    const std::size_t character_property_map_size = {};\n\n".format(len(elements))
    
    content += "    // clang-format off\n"
    content += "    const character_property_map_element_type character_property_map[] = {\n"
    for e in elements:
        content += e
    content += "    };\n"
    content += "    // clang-format on\n"
    
    content += '''

}
'''
    return content

def save_file(path, content):
    with path.open(mode='w', newline='\r\n') as stream:
        stream.write(content)

main()
