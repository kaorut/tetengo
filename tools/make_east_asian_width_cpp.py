#! /usr/bin/env python3
# Makes east_asian_width.cpp for tetengo::cli
# Copyright (C) 2019-2020 kaoru  https://www.tetengo.org/

from pathlib import Path
import re
import sys


def main():
    elements = []
    for line in sys.stdin:
        element = make_element(line)
        if element:
            elements.append(element)
    cpp_source = make_cpp_source(elements)
    save_to_file(cpp_source, cpp_file_path())

def make_element(line):
    combining = is_combining(line);
    
    line = remove_comment(line);
    if not line:
        return
    
    (code_point, class_symbol) = to_code_point_and_class(line)
    class_type = to_class_type(class_symbol)
    combining_boolean = to_combining_boolean(combining);
    
    return "        { " + "0x{}, east_asian_width_class_type::{}, {}".format(
        code_point, class_type, combining_boolean
    ) + " },\n"

def remove_comment(line):
    line = line.rstrip("\n")
    if " " in line:
        line = line[0:line.find(" ")]
    if "#" in line:
        line = line[0:line.find("#")]
    return line;

def to_code_point_and_class(line):
    matched = re.match("^([0-9A-F]+)(\.\.[0-9A-F]+)?;([A-Za-z]+)", line)
    return (matched.group(1), matched.group(3))

def to_class_type(symbol):
    if   symbol == "A":
        return "ambiguous"
    elif symbol == "F":
        return "fullwidth"
    elif symbol == "H":
        return "halfwidth"
    elif symbol == "Na":
        return "narrow"
    elif symbol == "W":
        return "wide"
    elif symbol == "N":
        return "neutral"
    else:
        raise RuntimeError("Unknown class: {}".format(symbol))

def is_combining(line):
    if not "#" in line:
        return False
    line = line[line.find("#"):]
    return "COMBINING" in line

def to_combining_boolean(combining):
    if combining:
        return "true"
    else:
        return "false"

def make_cpp_source(elements):
    content = '''/*! \\file
    \\brief An east Asian width list.

    This file is generated by tools/make_east_asian_width_cpp.py.

    Copyright (C) 2019-2020 kaoru  https://www.tetengo.org/
*/

#include <cstddef>

#include "tetengo.cli.east_asian_width.hpp"


namespace tetengo::cli
{
'''
    content += "    const std::size_t east_asian_width_list_size = {};\n\n".format(len(elements))
    
    content += "    // clang-format off\n"
    content += "    const east_asian_width_type east_asian_width_list[] = {\n"
    for e in elements:
        content += e
    content += "    };\n"
    content += "    // clang-format on\n"
    
    content += '''

}
'''
    return content

def cpp_file_path():
    root_path = Path(__file__).parent.parent
    return root_path / 'library' / 'cli' / 'cpp' / 'src' / 'tetengo.cli.east_asian_width.cpp'

def save_to_file(content, path):
    with path.open(mode='w', newline='\r\n') as stream:
        stream.write(content)

main()
